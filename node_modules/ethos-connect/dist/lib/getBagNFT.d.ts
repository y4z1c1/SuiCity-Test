import { SuiObjectData } from '@mysten/sui.js';
import type { JsonRpcProvider, SuiObjectResponse } from '@mysten/sui.js';
export declare type BagNFT = {
    id: string;
    owner?: string;
    name?: string;
    description?: string;
    url?: string;
};
export interface WithIds {
    objectIds: string[];
}
declare type FetchFnParser<RpcResponse, DataModel> = (typedData: RpcResponse, suiObject: SuiObjectData, rpcResponse: SuiObjectResponse) => DataModel | undefined;
declare type SuiObjectParser<RpcResponse, DataModel> = {
    parser: FetchFnParser<RpcResponse, DataModel>;
    regex: RegExp;
};
declare type ID = {
    id: string;
};
declare type Bag = {
    type: string;
    fields: {
        id: ID;
        size: number;
    };
};
declare type NftRpcResponse = {
    logical_owner: string;
    bag: Bag;
};
declare type NftRaw = {
    id: string;
    logicalOwner: string;
    bagId: string;
};
declare type NftDomains = {
    url: string;
    name: string;
    description: string;
};
export declare type Nft = {
    nft: NftRaw;
    fields?: Partial<NftDomains>;
};
export declare const NftParser: SuiObjectParser<NftRpcResponse, NftRaw>;
export declare const parseDomains: (domains: SuiObjectResponse[]) => Partial<NftDomains>;
export declare const isBagNFT: (data: SuiObjectData) => boolean;
declare const getBagNFT: (provider: JsonRpcProvider, data: SuiObjectData) => Promise<{
    objectId: string;
    version: string;
    digest: string;
    type?: string | undefined;
    bcs?: {
        type: string;
        version: number;
        hasPublicTransfer: boolean;
        dataType: "moveObject";
        bcsBytes: string;
    } | {
        id: string;
        dataType: "package";
        moduleMap: Record<string, string>;
    } | undefined;
    owner?: "Immutable" | {
        AddressOwner: string;
    } | {
        ObjectOwner: string;
    } | {
        Shared: {
            initial_shared_version: number;
        };
    } | undefined;
    storageRebate?: string | undefined;
    previousTransaction?: string | undefined;
    content?: {
        type: string;
        fields: Record<string, any>;
        hasPublicTransfer: boolean;
        dataType: "moveObject";
    } | {
        disassembled: Record<string, string>;
        dataType: "package";
    } | undefined;
    display?: Record<string, string> | {
        data: Record<string, string> | null;
        error: {
            code: string;
            version?: number | undefined;
            digest?: string | undefined;
            error?: string | undefined;
            object_id?: string | undefined;
            parent_object_id?: string | undefined;
        } | null;
    } | undefined;
} | {
    url?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    id: undefined;
    owner: undefined;
}>;
export default getBagNFT;
