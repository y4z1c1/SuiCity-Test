import { SuiClient } from '@mysten/sui.js/client';
import { TransactionBlock } from '@mysten/sui.js/transactions';
import { WalletAccount } from '@mysten/wallet-standard';
import EthosConnectProvider from './components/EthosConnectProvider';
import SignInButton from './components/styled/SignInButton';
import { hideSignInModal, showSignInModal } from './components/styled/SignInModal';
import { AddressWidgetButtons } from './enums/AddressWidgetButtons';
import { Chain } from './enums/Chain';
import { EthosConnectStatus } from './enums/EthosConnectStatus';
import { ClientAndSigner } from './types/ClientAndSigner';
import { Signer } from './types/Signer';
import { Wallet } from './types/Wallet';
import { SuiNFT, Token, WalletContents } from './types/WalletContents';
import DetachedEthosConnectProvider from './components/DetachedEthosConnectProvider';
import { ExtendedSuiObjectData } from './types/ExtendedSuiObjectData';
declare const ethos: {
    login: ({ email, provider, apiKey }: import("./lib/login").loginArgs) => Promise<import("./types/User").User | null | undefined>;
    logout: (signer: import("./types/Signer").ExtensionSigner | import("./types/Signer").HostedSigner, fromWallet?: boolean) => Promise<void>;
    signMessage: ({ signer, message }: {
        signer?: any;
        message: string | Uint8Array;
    }) => Promise<any>;
    transact: ({ signer, transactionInput }: {
        signer: import("./types/Signer").ExtensionSigner | import("./types/Signer").HostedSigner;
        transactionInput: import("./types/EthosSignAndExecuteTransactionBlockInput").EthosSignAndExecuteTransactionBlockInput;
    }) => Promise<import("@mysten/sui.js/client").SuiTransactionBlockResponse>;
    signTransactionBlock: ({ signer, transactionInput }: {
        signer: import("./types/Signer").ExtensionSigner | import("./types/Signer").HostedSigner;
        transactionInput: import("./types/EthosSignTransactionBlockInput").EthosSignTransactionBlockInput;
    }) => Promise<import("@mysten/wallet-standard").SuiSignTransactionBlockOutput>;
    executeTransactionBlock: ({ signer, transactionInput }: {
        signer: import("./types/Signer").ExtensionSigner | import("./types/Signer").HostedSigner;
        transactionInput: import("./types/EthosExecuteTransactionBlockInput").EthosExecuteTransactionBlockInput;
    }) => Promise<import("@mysten/sui.js/client").SuiTransactionBlockResponse>;
    preapprove: ({ signer, preapproval }: import("./lib/preapprove").PreapprovalArgs) => Promise<any>;
    showWallet: (signer: Signer) => void;
    hideWallet: (signer: Signer) => void;
    showSignInModal: typeof showSignInModal;
    hideSignInModal: typeof hideSignInModal;
    useClientAndSigner: () => ClientAndSigner;
    useAddress: () => string | undefined;
    useContents: () => WalletContents | undefined;
    useWallet: () => import("./types/WalletContextContents").WalletContextContents;
    useContext: ({ configuration, onWalletConnected }: import("./hooks/useContext").UseContextArgs) => import("./types/ConnectContextContents").ConnectContextContents;
    getWalletContents: ({ address, network, existingContents, invalidPackageModifications }: import("./lib/getWalletContents").GetWalletContentsArgs) => Promise<WalletContents | null>;
    checkForAssetType: ({ signer, wallet, type, cursor, options, filter }: import("./lib/checkForAssetType").CheckForAssetTypeArgs) => Promise<{
        assets: (import("@mysten/sui.js/client").SuiObjectData | null | undefined)[];
        nextCursor: string | null | undefined;
    } | undefined>;
    dripSui: ({ address, networkName }: {
        address: string;
        networkName: "devnet" | "testnet" | "localnet";
    }) => Promise<{
        transferredGasObjects: {
            amount: number;
            id: string;
            transferTxDigest: string;
        }[];
        error?: string | null | undefined;
    }>;
    getSuiName: (address: string, network?: string | undefined) => Promise<import("@mysten/sui.js/client").ResolvedNameServiceNames>;
    getSuiAddress: (name: string, network?: string | undefined) => Promise<string | null>;
    formatBalance: (balance?: string | number | bigint | undefined, decimals?: number) => string;
    truncateMiddle: (text: string, length?: number) => string;
    ipfsConversion: (src?: string | undefined) => string;
    components: {
        AddressWidget: ({ includeMenu, buttonColor, extraButtons, excludeButtons, externalContext }: import("./components/styled/AddressWidget").AddressWidgetProps) => JSX.Element;
        MenuButton: (props: import("./components/headless/HoverColorButton").HoverColorButtonProps) => JSX.Element;
        headless: {
            HoverColorButton: (props: import("./components/headless/HoverColorButton").HoverColorButtonProps) => JSX.Element;
        };
    };
    enums: {
        AddressWidgetButtons: typeof AddressWidgetButtons;
    };
};
export { EthosConnectProvider, DetachedEthosConnectProvider, SignInButton, ethos, EthosConnectStatus, TransactionBlock, Chain };
export type { Wallet, WalletAccount, WalletContents, ClientAndSigner, Signer, SuiNFT, Token, ExtendedSuiObjectData, SuiClient };
