import { StandardConnectInput, SuiSignAndExecuteTransactionBlockInput, SuiSignAndExecuteTransactionBlockOutput, SuiSignMessageInput, SuiSignMessageOutput, SuiSignPersonalMessageInput, SuiSignPersonalMessageOutput, SuiSignTransactionBlockInput, SuiSignTransactionBlockOutput, WalletAccount, WalletWithSuiFeatures } from '@mysten/wallet-standard';
import { StorageAdapter } from './storage';
export * from './storage';
export declare const DEFAULT_FEATURES: (keyof WalletWithSuiFeatures['features'])[];
export interface WalletKitCoreOptions {
    preferredWallets?: string[];
    storageAdapter?: StorageAdapter;
    storageKey?: string;
    features?: string[];
}
export declare enum WalletKitCoreConnectionStatus {
    DISCONNECTED = "DISCONNECTED",
    CONNECTING = "CONNECTING",
    CONNECTED = "CONNECTED",
    ERROR = "ERROR"
}
export interface InternalWalletKitCoreState {
    wallets: WalletWithSuiFeatures[];
    currentWallet: WalletWithSuiFeatures | null;
    accounts: readonly WalletAccount[];
    currentAccount: WalletAccount | null;
    status: WalletKitCoreConnectionStatus;
}
export interface WalletKitCoreState extends InternalWalletKitCoreState {
    isConnecting: boolean;
    isConnected: boolean;
    isError: boolean;
}
type OptionalProperties<T extends Record<any, any>, U extends keyof T> = Omit<T, U> & Partial<Pick<T, U>>;
export interface WalletKitCore {
    autoconnect(): Promise<void>;
    getState(): WalletKitCoreState;
    subscribe(handler: SubscribeHandler): Unsubscribe;
    connect(walletName: string, connectInput?: StandardConnectInput): Promise<void>;
    selectAccount(account: WalletAccount): void;
    disconnect(): Promise<void>;
    /** @deprecated Use `signPersonalMessage` instead. */
    signMessage(messageInput: OptionalProperties<SuiSignMessageInput, 'account'>): Promise<SuiSignMessageOutput>;
    signPersonalMessage(messageInput: OptionalProperties<SuiSignPersonalMessageInput, 'account'>): Promise<SuiSignPersonalMessageOutput>;
    signTransactionBlock: (transactionInput: OptionalProperties<SuiSignTransactionBlockInput, 'chain' | 'account'>) => Promise<SuiSignTransactionBlockOutput>;
    signAndExecuteTransactionBlock: (transactionInput: OptionalProperties<SuiSignAndExecuteTransactionBlockInput, 'chain' | 'account'>) => Promise<SuiSignAndExecuteTransactionBlockOutput>;
}
export type SubscribeHandler = (state: WalletKitCoreState) => void;
export type Unsubscribe = () => void;
export declare function createWalletKitCore({ preferredWallets, storageAdapter, storageKey, features, }: WalletKitCoreOptions): WalletKitCore;
